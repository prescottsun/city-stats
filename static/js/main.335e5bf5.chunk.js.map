{"version":3,"sources":["utils/loadData.js","contexts/UserContext.jsx","components/LoginForm.jsx","components/TestAPI.jsx","contexts/CityContext.jsx","components/WidgetTabs.jsx","components/EmbeddedWidget.jsx","components/SearchCity.jsx","firebaseConfig.js","components/FirebaseLogin.jsx","components/Navbar.jsx","components/CityList.jsx","components/Wrapper.jsx","components/Signup.jsx","components/UserInfo.jsx","components/Title.jsx","App.js","serviceWorker.js","index.js"],"names":["loadData","url","a","async","fetch","response","data","json","UserContext","createContext","UserContextProvider","props","useState","isLoggedIn","firstName","lastName","email","user","setUser","Provider","value","getUser","console","log","children","LoginForm","setEmail","password","setPassword","useContext","onSubmit","e","preventDefault","method","headers","Accept","body","JSON","stringify","reply","status","alert","login","type","name","onChange","target","required","TestAPI","state","setState","useEffect","callAPI","map","test","key","id","var_val","var_val2","int_val","CityContext","CityContextProvider","city","WidgetTabs","handleClick","tabs","Object","entries","isOutlined","isColor","isSize","onClick","EmbeddedWidget","setType","match","params","toUpperCase","width","height","className","withRouter","query","setQuery","setCity","queryLC","toLowerCase","history","push","placeholder","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseAppAuth","firebase","auth","providers","googleProvider","GoogleAuthProvider","withFirebaseAuth","signOut","signInWithGoogle","displayName","Navigation","style","border","margin","href","CityList","cities","setCities","cityNames","getCities","to","Wrapper","isCentered","Signup","handleChange","signup","UserInfo","Title","App","basename","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.335e5bf5.chunk.js","sourcesContent":["export const loadData = async url => {\n  const response = await fetch(url);\n  const data = response.json();\n  return data;\n};\n","import React, { createContext, useState, useEffect } from 'react'\nimport { loadData } from '../utils/loadData'\n\nexport const UserContext = createContext()\n\nconst UserContextProvider = (props) => {\n    const [user, setUser] = useState({\n        isLoggedIn: false,\n        firstName: 'placeholder',\n        lastName: 'placeholder',\n        email: 'placeholder'\n    })\n\n    const getUser = async () => {\n        const response = await loadData(\"http://localhost:9000/users/login\");\n        console.log('getuser is: ', response)\n        setUser(response);\n    }\n\n\n    return (\n        <UserContext.Provider value={{ user, getUser }}>\n            {props.children}\n        </UserContext.Provider>\n\n    )\n}\n\nexport default UserContextProvider","import React, { useState, useEffect, useContext } from \"react\";\nimport { UserContext } from \"../contexts/UserContext\";\n\nconst LoginForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const { getUser } = useContext(UserContext)\n  const login = async data => {\n    const response = await fetch('http://localhost:9000/users/login', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    console.log(response)\n    const reply = await response;\n    if (reply.status === 200) {\n      alert('login succeeded');\n      getUser()\n    }\n    if (reply.status !== 200) {\n      alert('login failed')\n    }\n  }\n  const handleSubmit = e => {\n    e.preventDefault();\n    const data = { email, password }\n    login(data)\n  };\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>email</label>\n        <input\n          type=\"text\"\n          name=\"email\"\n          onChange={e => setEmail(e.target.value)}\n          required\n        />\n        <label>password</label>\n        <input\n          type=\"password\"\n          name=\"password\"\n          onChange={e => setPassword(e.target.value)}\n          required\n        />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState, useEffect } from \"react\";\nimport { loadData } from \"../utils/loadData\";\n\nconst TestAPI = () => {\n  const [state, setState] = useState([]);\n\n  const callAPI = async () => {\n    const response = await loadData(\"http://localhost:9000/testAPI\");\n    setState(response);\n  };\n\n  useEffect(() => {\n    callAPI();\n  }, []);\n  console.log(\"state: \", state);\n  return (\n    // <p>{state.value}</p>\n    <ul>\n      {state.map(test => {\n        return (\n          <li key={test.id}>\n            var_val: {test.var_val}<br />\n            var_val2: {test.var_val2}<br />\n            int_val: {test.int_val}\n            {/* {test.value} */}\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default TestAPI;\n","import React, { createContext, useState } from 'react'\n\nexport const CityContext = createContext()\n\nconst CityContextProvider = (props) => {\n    const [state, setState] = useState([{ city: 'Atlanta' }])\n\n    return (\n        <CityContext.Provider value={{ state }}>\n            {props.children}\n        </CityContext.Provider>\n\n    )\n}\n\nexport default CityContextProvider","import React, { useState } from 'react'\nimport { Button } from 'bloomer'\n\nconst WidgetTabs = ({ handleClick }) => {\n    const [tabs, setTabs] = useState({\n        'Quality of Life': 'scores',\n        'Cost of Living': 'costs',\n        'Job Salaries': 'salaries',\n        'Safety': 'crime',\n        'Education': 'education',\n        'LGBT Rights': 'tolerance',\n        'Climate': 'weather',\n        'Outdoors': 'outdoors',\n        'Startup Scene': 'startup',\n\n    })\n\n\n    return (\n        <ul>\n            {Object.entries(tabs).map(([key, value]) => {\n                return (\n                    <Button isOutlined isColor='dark' isSize='medium' value={value} onClick={handleClick}>{key}</Button>\n                )\n            })}\n        </ul>\n    )\n}\n\nexport default WidgetTabs\n","import React, { useState, useContext, useEffect } from \"react\";\nimport Iframe from \"react-iframe\";\nimport { CityContext } from \"../contexts/CityContext\";\nimport WidgetTabs from \"./WidgetTabs\";\n\nconst EmbeddedWidget = (props) => {\n  // const { city } = useContext(CityContext)\n  const [state, setState] = useState([])\n  const [type, setType] = useState('')\n\n  useEffect(() => {\n    const city = props.match.params.city\n    setState(city)\n  }, [])\n\n  const handleClick = e => {\n    setType(e.target.value)\n  }\n\n  return (\n    <container>\n      <h1>\n        {`${state}`.toUpperCase()}\n      </h1>\n      <WidgetTabs handleClick={handleClick} />\n\n      <Iframe\n        url={`https://teleport.org/cities/${state}/widget/${type}/?currency=USD&citySwitcher=false`}\n        width=\"770px\"\n        height=\"958px\"\n        className=\"teleport-widget-script\"\n      // src=\"https://teleport.org/assets/firefly/widget-snippet.min.js\"\n      />\n    </container>\n  );\n};\n\nexport default EmbeddedWidget;\n","import React, { useState, } from 'react'\nimport { withRouter } from 'react-router-dom'\n\nconst SearchCity = (props) => {\n    const [query, setQuery] = useState('')\n    const [city, setCity] = useState('')\n\n    const handleChange = (e) => {\n        setQuery(e.target.value)\n    }\n    const handleSubmit = (e) => {\n        const queryLC = query.toLowerCase()\n        e.preventDefault()\n        setCity(queryLC)\n        setQuery('')\n        props.history.push(`/cities/${queryLC}`)\n    }\n    return (\n\n        <form onSubmit={handleSubmit}>\n            {/* <label>City Search</label> */}\n            <input type='text' name='query' value={query} onChange={handleChange} placeholder='Enter a city name'\n            />\n            <input type='submit' value=\"Search\" />\n        </form>\n    )\n}\n\nexport default withRouter(SearchCity)\n","// <!-- The core Firebase JS SDK is always required and must be listed first -->\n// <script src=\"https://www.gstatic.com/firebasejs/7.5.0/firebase-app.js\"></script>\n\n// <!-- TODO: Add SDKs for Firebase products that you want to use\n//      https://firebase.google.com/docs/web/setup#available-libraries -->\n// <script src=\"https://www.gstatic.com/firebasejs/7.5.0/firebase-analytics.js\"></script>\n\n// <script>\n//   // Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDLTAFE-VTcBAELLGNxqnzcTfd8TcLIcqw\",\n  authDomain: \"react-solo-project.firebaseapp.com\",\n  databaseURL: \"https://react-solo-project.firebaseio.com\",\n  projectId: \"react-solo-project\",\n  storageBucket: \"react-solo-project.appspot.com\",\n  messagingSenderId: \"1022509508533\",\n  appId: \"1:1022509508533:web:fd6394f445d886f25edbfc\",\n  measurementId: \"G-BG37WD2EXM\"\n};\n// Initialize Firebase\n//   firebase.initializeApp(firebaseConfig);\n//   firebase.analytics();\n// </script>\n\nexport default firebaseConfig;\n","import React from 'react'\nimport withFirebaseAuth from \"react-with-firebase-auth\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport firebaseConfig from \"../firebaseConfig\";\nimport { Button } from 'bloomer'\n\nconst FirebaseLogin = (props) => {\n    const { user, signOut, signInWithGoogle } = props;\n    return (\n        <div>\n            {user ? <h1>Welcome, {user.displayName}</h1> : ''}\n            {user ? (\n                <Button isColor='primary' onClick={signOut}>Sign out</Button>\n            ) : (\n                    <Button isColor='primary' onClick={signInWithGoogle}>Sign in with Google</Button>\n                )}\n        </div>\n    )\n}\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst firebaseAppAuth = firebaseApp.auth();\nconst providers = {\n    googleProvider: new firebase.auth.GoogleAuthProvider()\n};\n\nexport default withFirebaseAuth({\n    providers,\n    firebaseAppAuth\n})(FirebaseLogin);\n","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, NavbarBrand, NavbarItem, Icon, NavbarBurger, NavbarMenu, NavbarStart, NavbarEnd } from 'bloomer'\nimport { UserContext } from '../contexts/UserContext'\nimport SearchCity from \"./SearchCity\";\nimport FirebaseLogin from \"./FirebaseLogin\";\n\nconst Navigation = () => {\n\n  const { user } = useContext(UserContext)\n  // console.log(UserContext)\n  // console.log(user.isLoggedIn)\n  return (\n    <Navbar style={{ border: 'solid 1px #00D1B2', margin: '0' }}>\n      <NavbarBrand>\n        <NavbarItem>\n          City Life\n          <Icon className='fa fa-github' />\n        </NavbarItem>\n        {/* <NavbarBurger isActive={this.state.isActive} onClick={this.onClickNav} /> */}\n      </NavbarBrand>\n      {/* <NavbarMenu isActive={this.state.isActive} onClick={this.onClickNav}> */}\n      <NavbarStart>\n        <NavbarItem href='/'>Home</NavbarItem>\n        <NavbarItem href='/testAPI'>Test API</NavbarItem>\n        <NavbarItem href='/cities'>Cities</NavbarItem>\n        <NavbarItem href='/profile'>Profile</NavbarItem>\n      </NavbarStart>\n      <NavbarItem><SearchCity /></NavbarItem>\n      <NavbarEnd>\n        <FirebaseLogin />\n        {/* {\n          user.isLoggedIn ? <NavbarItem href='/logout'>Logout</NavbarItem>\n            :\n            <>\n\n              <NavbarItem href='/login'>Login</NavbarItem>\n              <NavbarItem href='/signup'>Sign Up</NavbarItem>\n            </>\n        } */}\n\n      </NavbarEnd>\n      {/* </NavbarMenu> */}\n    </Navbar>\n\n  );\n};\n\nexport default Navigation;\n","import React, { useState, useEffect } from \"react\";\nimport { loadData } from \"../utils/loadData\";\nimport { Link } from 'react-router-dom'\nimport { Columns } from 'bloomer'\n\nconst CityList = () => {\n  const [cities, setCities] = useState([]);\n\n  const getCities = async () => {\n    const cityNames = await loadData(\n      `https://my-little-cors-proxy.herokuapp.com/https://developers.teleport.org/assets/urban_areas.json`\n    );\n    console.log('city names', cityNames)\n    setCities(cityNames)\n  };\n\n  useEffect(() => {\n    getCities()\n    // console.log('cities', cities)\n  }, [])\n\n\n  return (\n    <Columns>\n      <ul id='cityColumns'>\n        {Object.entries(cities).map(([key, city]) => {\n          return (\n            <>\n              <ul><Link to={`/cities/${city}`}>{key}</Link></ul>\n\n            </>\n          )\n        })}\n      </ul>\n    </Columns >\n  )\n};\n\nexport default CityList;\n","import React from \"react\";\nimport { Section, Columns } from \"bloomer\";\n\nconst Wrapper = props => {\n    return (\n        <Section>\n            <Columns isCentered>{props.children}</Columns>\n        </Section>\n    );\n};\n\nexport default Wrapper;","import React, { useState } from 'react'\n\nconst Signup = () => {\n    const [user, setUser] = useState({\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: ''\n    })\n    const { firstName, lastName, email, password } = user\n\n    const signup = async data => {\n        const response = await fetch('http://localhost:9000/users/signup', {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        })\n        console.log(response)\n        const reply = await response;\n        if (reply.status === 200) {\n            alert('user added');\n        }\n        if (reply.status !== 200) {\n            alert('something went wrong')\n        }\n\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        const { firstName, lastName, email, password } = user\n\n        const data = { firstName, lastName, email, password }\n        signup(data)\n    }\n\n    const handleChange = e => {\n        setUser({ ...user, [e.target.name]: e.target.value })\n    }\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <label>First Name</label>\n                <input type='text' name='firstName' value={firstName} onChange={handleChange} />\n                <label>Last Name</label>\n                <input type='text' name='lastName' value={lastName} onChange={handleChange} />\n                <label>Email</label>\n                <input type='text' name='email' required value={email} onChange={handleChange} />\n                <label>Password</label>\n                <input type='password' name='password' required value={password} onChange={handleChange} />\n                <button type='submit'>Signup</button>\n\n            </form>\n        </div>\n    )\n}\n\nexport default Signup\n","import React, { useContext } from 'react'\nimport { UserContext } from \"../contexts/UserContext\";\n\nconst UserInfo = () => {\n    const { user } = useContext(UserContext)\n\n    return (\n        <div>\n            <p>First Name : {user.firstName}</p>\n            <p>Last Name : {user.lastName}</p>\n            <p>Email : {user.email}</p>\n\n        </div>\n    )\n}\n\nexport default UserInfo\n","import React from 'react'\n\nconst Title = () => {\n    return (\n        <div>\n            <h1>Welcome to City Life</h1>\n            <p>Enter a city name in the search field or select from the cities list page to begin.</p>\n        </div>\n    )\n}\n\nexport default Title\n","import React from \"react\";\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport LoginForm from \"./components/LoginForm\";\nimport \"./App.css\";\nimport TestAPI from \"./components/TestAPI\";\nimport EmbeddedWidget from \"./components/EmbeddedWidget\";\nimport Navigation from \"./components/Navbar\";\nimport CityList from \"./components/CityList\";\nimport Wrapper from \"./components/Wrapper\";\nimport SearchCity from \"./components/SearchCity\";\nimport Signup from \"./components/Signup\";\nimport UserInfo from \"./components/UserInfo\";\n\nimport withFirebaseAuth from \"react-with-firebase-auth\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport firebaseConfig from \"./firebaseConfig\";\n\nimport \"bulma/css/bulma.css\";\nimport CityContextProvider from \"./contexts/CityContext\";\nimport UserContextProvider from \"./contexts/UserContext\";\nimport Title from \"./components/Title\";\n// import FirebaseLogin from \"./components/FirebaseLogin\";\n\nconst App = props => {\n  return (\n    <div className=\"App\">\n      <UserContextProvider>\n        <CityContextProvider>\n          <HashRouter basename=\"/\">\n            <Route path=\"/\" component={Navigation} />\n            {/* <Route path=\"/\" render={props => <FirebaseLogin {...props} />} /> */}\n            <Wrapper>\n              {/* <Route path=\"/\" component={SearchCity} /> */}\n              <Route exact path=\"/\" component={Title} />\n              <Route path=\"/testAPI\" component={TestAPI} />\n              <Route path=\"/login\" component={LoginForm} />\n              <Route path=\"/signup\" component={Signup} />\n              <Route path=\"/profile\" component={UserInfo} />\n              <Route exact path=\"/cities\" component={CityList} />\n              <Route path=\"/cities/:city\" component={EmbeddedWidget} />\n            </Wrapper>\n          </HashRouter>\n        </CityContextProvider>\n      </UserContextProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}